#!/usr/bin/env python3
import io
import sqlite3
import streamlit as st
import pandas as pd
from pypdf import PdfReader, PdfWriter

st.title("PDF Autofill Demo")

DB_PATH = st.secrets.get("sqlite", {}).get("path", "demo.db")
def get_conn():
    return sqlite3.connect(DB_PATH)

def init_db():
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS customers (
            id INTEGER PRIMARY KEY,
            first_name TEXT,
            last_name TEXT,
            email TEXT
        )
    """)
    cur.execute("""
        INSERT OR IGNORE INTO customers VALUES
            (1,'Alice','Smith','alice@example.com'),
            (2,'Bob','Jones','bob@example.com')
    """)
    conn.commit()
    conn.close()

init_db()

def fill_pdf_bytes(template_bytes, data):
    reader = PdfReader(io.BytesIO(template_bytes))
    writer = PdfWriter(clone_from=reader)
    writer.set_need_appearances_writer(True)
    for page in writer.pages:
        writer.update_page_form_field_values(page, data)
    buf = io.BytesIO()
    writer.write(buf)
    buf.seek(0)
    return buf

def extract_fields(template_bytes):
    reader = PdfReader(io.BytesIO(template_bytes))
    fields = reader.get_form_text_fields() or {}
    return sorted(fields.keys())

# UI
tables = pd.read_sql("SELECT name FROM sqlite_master WHERE type='table'", get_conn())['name']
table = st.selectbox("Choose table:", tables)
if not table:
    st.stop()

df = pd.read_sql(f"SELECT * FROM {table}", get_conn())
st.dataframe(df)

uploaded = st.file_uploader("Upload PDF form", type="pdf")
if not uploaded or df.empty:
    st.stop()

template = uploaded.read()
fields = extract_fields(template)
if not fields:
    st.error("No form fields detected.")
    st.stop()

st.write("Detected fields:", fields)

with st.form("mapping_form"):
    mapping = {}
    for f in fields:
        opts = [""] + [c for c in df.columns if c != "id"]
        mapping[f] = st.selectbox(f"Map '{f}' to:", opts, key=f)
    submitted = st.form_submit_button("Generate PDFs")

if submitted:
    for i, row in df.iterrows():
        data = {f: row[mapping[f]] for f in fields if mapping[f]}
        if not data:
            st.warning(f"No data for row {i+1}")
            continue
        buf = fill_pdf_bytes(template, data)
        fname = f"{table}_row{i+1}.pdf"
        st.download_button(f"Download #{i+1}", buf, file_name=fname, mime="application/pdf")
    st.success("PDF generation complete!")
